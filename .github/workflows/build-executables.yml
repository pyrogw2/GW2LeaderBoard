name: Build Executables

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Required for creating releases
  actions: read

jobs:
  build-windows:
    name: Build Windows .exe
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        pyinstaller workflow_ui.spec
        
    - name: Test executable
      run: |
        # Test that the executable was created and can start
        if (Test-Path "dist/workflow_ui.exe") {
          Write-Host "✅ Executable created successfully"
          
          # Check file size
          $file = Get-Item "dist/workflow_ui.exe"
          Write-Host "File size: $($file.Length) bytes"
          if ($file.Length -gt 5MB) {
            Write-Host "✅ Executable appears to be properly bundled (good size)"
          } else {
            Write-Host "⚠️ Executable seems small ($($file.Length) bytes), may be missing dependencies"
          }
          
          # Test import capabilities by running a quick Python test
          Write-Host "Testing critical imports..."
          Start-Process -FilePath "dist/workflow_ui.exe" -ArgumentList "--version" -Wait -NoNewWindow -ErrorAction SilentlyContinue
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Executable runs without immediate crashes"
          } else {
            Write-Host "⚠️ Executable may have import issues (exit code: $LASTEXITCODE)"
          }
        } else {
          Write-Host "❌ Executable not found"
          exit 1
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: gw2-leaderboard-windows
        path: |
          dist/workflow_ui.exe
          README.md
          sync_config.json.example
          
  build-macos:
    name: Build macOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS app bundle
      run: |
        # Create macOS app bundle (without icon for now)
        pyinstaller --windowed \
          --name "GW2 Leaderboard" \
          --add-data "src:src" \
          workflow_ui.py
          
    - name: Test macOS app
      run: |
        if [ -d "dist/GW2 Leaderboard.app" ]; then
          echo "✅ macOS app bundle created successfully"
          # Test that the executable exists inside the app bundle
          if [ -f "dist/GW2 Leaderboard.app/Contents/MacOS/GW2 Leaderboard" ]; then
            echo "✅ App executable found"
          else
            echo "❌ App executable not found"
            exit 1
          fi
        else
          echo "❌ macOS app bundle not found"
          ls -la dist/
          exit 1
        fi
        
    - name: Create DMG (optional)
      run: |
        # Install create-dmg for better macOS distribution
        brew install create-dmg
        
        # Create a DMG file
        mkdir -p dmg-contents
        cp -r "dist/GW2 Leaderboard.app" dmg-contents/
        cp README.md dmg-contents/
        
        create-dmg \
          --volname "GW2 Leaderboard" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --app-drop-link 600 185 \
          "GW2-Leaderboard.dmg" \
          "dmg-contents/" || echo "DMG creation failed, continuing without DMG"
          
    - name: Upload macOS app
      uses: actions/upload-artifact@v4
      with:
        name: gw2-leaderboard-macos
        path: |
          dist/GW2 Leaderboard.app/
          GW2-Leaderboard.dmg
          README.md
          
  build-linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux binary
      run: |
        pyinstaller --onefile \
          --name "gw2-leaderboard" \
          --add-data "src:src" \
          workflow_ui.py
          
    - name: Test Linux binary
      run: |
        if [ -f "dist/gw2-leaderboard" ]; then
          echo "✅ Linux binary created successfully"
          chmod +x dist/gw2-leaderboard
          # Test that it doesn't crash immediately (headless)
          timeout 5s xvfb-run -a ./dist/gw2-leaderboard --help || true
        else
          echo "❌ Linux binary not found"
          exit 1
        fi
        
    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: gw2-leaderboard-linux
        path: |
          dist/gw2-leaderboard
          README.md
          sync_config.json.example
          
  create-release:
    name: Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release archives
      run: |
        # Create Windows ZIP
        cd gw2-leaderboard-windows
        zip -r ../GW2-Leaderboard-Windows.zip .
        cd ..
        
        # Create macOS ZIP  
        cd gw2-leaderboard-macos
        zip -r ../GW2-Leaderboard-macOS.zip .
        cd ..
        
        # Create Linux ZIP
        cd gw2-leaderboard-linux
        zip -r ../GW2-Leaderboard-Linux.zip .
        cd ..
        
    - name: Delete existing release if exists
      run: |
        # Delete the release if it already exists (handles 403 errors from duplicate releases)
        gh release delete ${{ github.ref_name }} --yes || echo "Release doesn't exist or couldn't be deleted"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          GW2-Leaderboard-Windows.zip
          GW2-Leaderboard-macOS.zip  
          GW2-Leaderboard-Linux.zip
        generate_release_notes: true
        draft: false
        prerelease: true
        fail_on_unmatched_files: false
        body: |
          ## GW2 WvW Leaderboard v${{ github.ref_name }}
          
          Cross-platform executables for the GW2 WvW Leaderboard system.
          
          ### Downloads
          - **Windows**: `GW2-Leaderboard-Windows.zip` - Contains `workflow_ui.exe`
          - **macOS**: `GW2-Leaderboard-macOS.zip` - Contains `GW2 Leaderboard.app` 
          - **Linux**: `GW2-Leaderboard-Linux.zip` - Contains `gw2-leaderboard` binary
          
          ### First Time Setup
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Copy `sync_config.json.example` to `sync_config.json` 
          4. Edit `sync_config.json` with your settings
          5. Run the executable
          
          ### Features
          - No Python installation required
          - Graphical interface for all operations  
          - Built-in configuration editor
          - Progress tracking and console output
          
          **Note**: This is a test release. Please report any issues!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}