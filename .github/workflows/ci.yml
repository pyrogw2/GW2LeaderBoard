name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest beautifulsoup4 requests
    
    - name: Create test database
      run: |
        # Create a minimal test database for CI
        python -c "
        import sqlite3
        import os
        from datetime import datetime, timedelta
        
        # Create test database
        conn = sqlite3.connect('gw2_comprehensive.db')
        cursor = conn.cursor()
        
        # Create tables
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS player_performances (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_name TEXT NOT NULL,
                profession TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                parsed_date TEXT NOT NULL,
                target_dps REAL DEFAULT 0.0,
                healing_per_sec REAL DEFAULT 0.0,
                barrier_per_sec REAL DEFAULT 0.0,
                condition_cleanses_per_sec REAL DEFAULT 0.0,
                boon_strips_per_sec REAL DEFAULT 0.0,
                stability_gen_per_sec REAL DEFAULT 0.0,
                resistance_gen_per_sec REAL DEFAULT 0.0,
                might_gen_per_sec REAL DEFAULT 0.0,
                protection_gen_per_sec REAL DEFAULT 0.0,
                down_contribution_per_sec REAL DEFAULT 0.0,
                burst_consistency_1s REAL DEFAULT 0.0,
                burst_damage_1s REAL DEFAULT 0.0,
                distance_from_tag_avg REAL DEFAULT 0.0,
                fight_time REAL DEFAULT 0.0,
                apm_total REAL DEFAULT 0.0,
                apm_no_auto REAL DEFAULT 0.0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS glicko_ratings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_name TEXT NOT NULL,
                profession TEXT NOT NULL,
                metric_category TEXT NOT NULL,
                rating REAL DEFAULT 1500.0,
                rd REAL DEFAULT 350.0,
                volatility REAL DEFAULT 0.06,
                games_played INTEGER DEFAULT 0,
                total_rank_sum REAL DEFAULT 0.0,
                average_rank REAL DEFAULT 0.0,
                total_stat_value REAL DEFAULT 0.0,
                average_stat_value REAL DEFAULT 0.0,
                UNIQUE(account_name, profession, metric_category)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS guild_members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_name TEXT NOT NULL UNIQUE,
                guild_id TEXT NOT NULL,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS player_rating_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_name TEXT NOT NULL,
                profession TEXT NOT NULL,
                metric_category TEXT NOT NULL,
                rating REAL NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Insert test data
        test_data = [
            ('TestPlayer1.1234', 'Firebrand', '202507081200', '2025-07-08', 2500.0, 1200.0, 800.0, 15.0, 8.0, 25.0, 12.0, 40.0, 20.0, 180.0, 0.8, 45000.0, 250.0, 30.0, 68.0, 55.0),
            ('TestPlayer2.5678', 'Chronomancer', '202507081200', '2025-07-08', 2200.0, 800.0, 1200.0, 20.0, 12.0, 15.0, 8.0, 30.0, 25.0, 150.0, 0.7, 38000.0, 180.0, 25.0, 72.0, 58.0),
            ('TestPlayer3.9012', 'Druid', '202507081200', '2025-07-08', 1800.0, 2000.0, 600.0, 25.0, 5.0, 20.0, 15.0, 35.0, 30.0, 100.0, 0.6, 28000.0, 320.0, 35.0, 65.0, 52.0),
        ]
        
        for data in test_data:
            cursor.execute('''
                INSERT INTO player_performances (
                    account_name, profession, timestamp, parsed_date, target_dps, healing_per_sec, barrier_per_sec,
                    condition_cleanses_per_sec, boon_strips_per_sec, stability_gen_per_sec, resistance_gen_per_sec,
                    might_gen_per_sec, protection_gen_per_sec, down_contribution_per_sec, burst_consistency_1s,
                    burst_damage_1s, distance_from_tag_avg, fight_time, apm_total, apm_no_auto
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', data)
        
        # Insert test ratings
        test_ratings = [
            ('TestPlayer1.1234', 'Firebrand', 'DPS', 1650.0, 150.0, 0.06, 5, 15.0, 3.0, 2500.0, 2500.0),
            ('TestPlayer2.5678', 'Chronomancer', 'DPS', 1580.0, 160.0, 0.06, 4, 18.0, 4.5, 2200.0, 2200.0),
            ('TestPlayer3.9012', 'Druid', 'Healing', 1620.0, 140.0, 0.06, 6, 12.0, 2.0, 2000.0, 2000.0),
        ]
        
        for rating_data in test_ratings:
            cursor.execute('''
                INSERT INTO glicko_ratings (
                    account_name, profession, metric_category, rating, rd, volatility, games_played,
                    total_rank_sum, average_rank, total_stat_value, average_stat_value
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', rating_data)
        
        # Insert test guild members
        cursor.execute('''
            INSERT INTO guild_members (account_name, guild_id) VALUES (?, ?)
        ''', ('TestPlayer1.1234', 'test-guild-id'))
        
        conn.commit()
        conn.close()
        print('Test database created successfully')
        "
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test web UI generation
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        from gw2_leaderboard.web.generate_web_ui import main
        
        # Test web UI generation with test database
        sys.argv = ['generate_web_ui', 'gw2_comprehensive.db', '-o', 'test_output', '--skip-recalc']
        try:
            main()
            print('✅ Web UI generation test passed')
        except Exception as e:
            print(f'❌ Web UI generation test failed: {e}')
            sys.exit(1)
        "
    
    - name: Test database operations
      run: |
        python -c "
        import sqlite3
        
        # Test database integrity
        conn = sqlite3.connect('gw2_comprehensive.db')
        cursor = conn.cursor()
        
        # Check tables exist
        cursor.execute('SELECT COUNT(*) FROM player_performances')
        perf_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM glicko_ratings')
        rating_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM guild_members')
        guild_count = cursor.fetchone()[0]
        
        print(f'Database integrity check:')
        print(f'  - Player performances: {perf_count} records')
        print(f'  - Glicko ratings: {rating_count} records')
        print(f'  - Guild members: {guild_count} records')
        
        if perf_count > 0 and rating_count > 0 and guild_count > 0:
            print('✅ Database operations test passed')
        else:
            print('❌ Database operations test failed')
            sys.exit(1)
        
        conn.close()
        "
    
    - name: Test imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        # Test core imports
        try:
            from gw2_leaderboard.core.glicko_rating_system import GlickoSystem, GlickoRating
            from gw2_leaderboard.web.data_processing import get_glicko_leaderboard_data
            from gw2_leaderboard.web.parallel_processing import generate_all_leaderboard_data
            print('✅ Core imports test passed')
        except Exception as e:
            print(f'❌ Core imports test failed: {e}')
            sys.exit(1)
        "